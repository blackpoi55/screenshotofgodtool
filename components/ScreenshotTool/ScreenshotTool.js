"use client";

import { useEffect, useRef, useState } from "react";
import html2canvas from "html2canvas";
import Swal from "sweetalert2";


export default function ScreenshotTool() {
    const selectionRef = useRef(null);
    const fabricRef = useRef(null);
    const [isEditing, setIsEditing] = useState(false);
    const [canvasUrl, setCanvasUrl] = useState(null);
    const [sidePanelOpen, setSidePanelOpen] = useState(false);
    const [canvasSize, setCanvasSize] = useState({ width: 800, height: 600 });
    const [fontSize, setFontSize] = useState(24);
    const [selectedColor, setSelectedColor] = useState("#ff0000");
    const [showInstruction, setShowInstruction] = useState(false);
    const [zoomLevel, setZoomLevel] = useState(0.5); // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ 1 (100%)
    const [isLoading, setIsLoading] = useState(false);
    const [screenshotValue, setscreenshotValue] = useState({
        "title": "",
        "description": "",
        "module": "",
        "url": "",
        "reporter": "",
        "screenshotpath": "",
        "severity": "‡∏ï‡πà‡∏≥",
    });


    useEffect(() => {
        const canvas = fabricRef.current;
        if (!canvas || !canvasUrl) return;

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà
        canvas.setDimensions({
            width: canvasSize.width * zoomLevel,
            height: canvasSize.height * zoomLevel,
        });

        if (canvas.backgroundImage) {
            canvas.backgroundImage.scaleX = (canvasSize.width * zoomLevel) / canvas.backgroundImage.width;
            canvas.backgroundImage.scaleY = (canvasSize.height * zoomLevel) / canvas.backgroundImage.height;
        }

        canvas.requestRenderAll();
    }, [zoomLevel]);
    useEffect(() => {
        if (typeof window !== "undefined") {
            const isMobile = window.innerWidth <= 768;
            setZoomLevel(isMobile ? 0.5 : 1);

            const width = Math.min(window.innerWidth * 0.9, 800);
            const height = width * 0.75;
            setCanvasSize({ width, height });
        }
    }, []);


    useEffect(() => {
        const key = (e) => {
            if (e.ctrlKey && ["q", "Q", "‡πÜ", "‡πê"].includes(e.key)) {
                e.preventDefault();
                startCapture();
            }
        };
        document.addEventListener("keydown", key);
        return () => document.removeEventListener("keydown", key);
    }, []);

    const startCapture = () => {
        setShowInstruction(true);

        if (selectionRef.current) {
            selectionRef.current.remove();
            selectionRef.current = null;
        }

        const box = document.createElement("div");
        box.style.position = "fixed";
        box.style.border = "2px solid red";
        box.style.zIndex = "9999";
        box.style.pointerEvents = "none";
        box.style.display = "none";
        document.body.appendChild(box);
        selectionRef.current = box;

        let startX = 0, startY = 0;

        function begin(x, y) {
            setShowInstruction(false);
            startX = x;
            startY = y;

            document.body.style.userSelect = "none";
            document.body.style.cursor = "crosshair";

            if (selectionRef.current) {
                Object.assign(selectionRef.current.style, {
                    left: `${startX}px`,
                    top: `${startY}px`,
                    width: "0px",
                    height: "0px",
                    display: "block",
                });
            }
        }

        function move(x, y) {
            const width = Math.abs(x - startX);
            const height = Math.abs(y - startY);
            const left = Math.min(x, startX);
            const top = Math.min(y, startY);

            if (selectionRef.current) {
                Object.assign(selectionRef.current.style, {
                    left: `${left}px`,
                    top: `${top}px`,
                    width: `${width}px`,
                    height: `${height}px`,
                });
            }
        }

        async function finishCapture() {
            document.body.style.userSelect = "auto";
            document.body.style.cursor = "default";

            if (!selectionRef.current) return;

            const rect = selectionRef.current.getBoundingClientRect();
            selectionRef.current.remove();
            selectionRef.current = null;

            const captured = await html2canvas(document.body, {
                x: rect.left + window.scrollX,
                y: rect.top + window.scrollY,
                width: rect.width,
                height: rect.height,
                scrollX: 0,
                scrollY: 0,
                windowWidth: document.documentElement.scrollWidth,
                windowHeight: document.documentElement.scrollHeight,
            });

            const dataUrl = captured.toDataURL();
            setCanvasUrl(dataUrl);
            setCanvasSize({ width: captured.width, height: captured.height });
            setIsEditing(true);
        }

        // Mouse Events
        function onMouseDown(e) {
            begin(e.clientX, e.clientY);
            document.addEventListener("mousemove", onMouseMove);
            document.addEventListener("mouseup", onMouseUp);
        }

        function onMouseMove(e) {
            move(e.clientX, e.clientY);
        }

        async function onMouseUp() {
            document.removeEventListener("mousemove", onMouseMove);
            document.removeEventListener("mouseup", onMouseUp);
            await finishCapture();
        }

        // Touch Events
        function onTouchStart(e) {
            const touch = e.touches?.[0];
            if (!touch) return;

            begin(touch.clientX, touch.clientY);
            document.addEventListener("touchmove", onTouchMove);
            document.addEventListener("touchend", onTouchEnd);
        }

        function onTouchMove(e) {
            const touch = e.touches?.[0];
            if (!touch) return;

            move(touch.clientX, touch.clientY);
        }

        async function onTouchEnd() {
            document.removeEventListener("touchmove", onTouchMove);
            document.removeEventListener("touchend", onTouchEnd);
            await finishCapture();
        }

        document.addEventListener("mousedown", onMouseDown, { once: true });
        document.addEventListener("touchstart", onTouchStart, { once: true });
    };


    useEffect(() => {
        if (isEditing && selectionRef.current) {
            selectionRef.current.remove();
            selectionRef.current = null;
        }
    }, [isEditing]);


    useEffect(() => {
        const setupCanvas = async () => {
            if (!isEditing || !canvasUrl) return;
            const fabricModule = await import("fabric");
            const fabric = fabricModule.fabric ?? fabricModule;
            if (fabricRef.current) fabricRef.current.dispose();
            const canvasEl = document.getElementById("screenshot-canvas");
            if (!canvasEl) return;
            const canvas = new fabric.Canvas(canvasEl, {
                width: canvasSize.width,
                height: canvasSize.height,
            });
            const image = new Image();
            image.onload = () => {
                canvas.setDimensions({
                    width: canvasSize.width * zoomLevel,
                    height: canvasSize.height * zoomLevel,
                });

                const fabricImg = new fabric.Image(image, {
                    scaleX: (canvasSize.width * zoomLevel) / image.width,
                    scaleY: (canvasSize.height * zoomLevel) / image.height,
                    selectable: false,
                    evented: false,
                });

                canvas.backgroundImage = fabricImg;
                canvas.renderAll();
            };
            image.onerror = () => console.error("‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            image.crossOrigin = "anonymous";
            image.src = canvasUrl;
            fabricRef.current = canvas;
            canvas.on("mouse:down", (e) => {
                if (e.target) {
                    canvas.setActiveObject(e.target);
                    const obj = e.target;
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô text ‡∏´‡∏£‡∏∑‡∏≠ rect ‡∏´‡∏£‡∏∑‡∏≠ group (arrow)
                    if (obj.type === "i-text") {
                        setSelectedColor(obj.fill || "#000000");
                        setFontSize(obj.fontSize || 24); // üëâ ‡∏î‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
                    } else if (obj.type === "rect") {
                        setSelectedColor(obj.stroke || "#000000");
                    } else if (obj.type === "group") {
                        const line = obj.item(0); // ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏°‡∏µ line ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
                        setSelectedColor(line.stroke || "#000000");
                    } else if (obj.type === "circle") {
                        setSelectedColor(obj.stroke || "#000000");
                    }
                    else if (obj.path && obj.path.length > 0) {
                        setSelectedColor(obj.stroke || "#000000");
                    }
                }
            });


            const handleDelete = (e) => {
                if ((e.key === "Delete") && canvas.getActiveObject()) {
                    canvas.remove(canvas.getActiveObject());
                    canvas.discardActiveObject();
                    canvas.requestRenderAll();
                }
            };
            let copiedObject = null;

            // ‚úÖ ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠ copy
            const handleCopy = async (e) => {
                if (e.ctrlKey && (e.key === "c" || e.key === "C" || e.key === "‡πÅ" || e.key === "‡∏â")) {
                    const active = canvas.getActiveObject();
                    if (active) {
                        try {
                            const cloned = await active.clone();
                            copiedObject = cloned;
                        } catch (err) {
                            console.error("Clone failed:", err);
                        }
                    }
                }
            };

            // ‚úÖ ‡∏Å‡∏î Ctrl+V ‡πÄ‡∏û‡∏∑‡πà‡∏≠ paste
            const handlePaste = async (e) => {
                if (e.ctrlKey && (e.key === "v" || e.key === "V" || e.key === "‡∏≠" || e.key === "‡∏Æ") && copiedObject) {
                    try {
                        const clonedObj = await copiedObject.clone();
                        clonedObj.set({
                            left: (clonedObj.left || 0) + 20,
                            top: (clonedObj.top || 0) + 20,
                        });

                        canvas.discardActiveObject();
                        canvas.add(clonedObj);
                        canvas.setActiveObject(clonedObj);
                        canvas.requestRenderAll();
                    } catch (err) {
                        console.error("Paste failed:", err);
                    }
                }
            };

            document.addEventListener("keydown", handleCopy);
            document.addEventListener("keydown", handlePaste);
            document.addEventListener("keydown", handleDelete);


            return () => {
                canvas.dispose();
                document.removeEventListener("keydown", handleDelete);
                document.removeEventListener("keydown", handleCopy);
                document.removeEventListener("keydown", handlePaste);

            };

        };
        setupCanvas();
    }, [isEditing, canvasUrl]);

    const addText = async () => {
        const fabricModule = await import("fabric");
        const fabric = fabricModule.fabric ?? fabricModule;
        const canvas = fabricRef.current;
        if (!canvas) return;
        const text = new fabric.IText("‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", {
            left: canvas.width / 2,
            top: canvas.height / 2,
            fill: selectedColor,
            fontSize: fontSize,
            originX: "center",
            originY: "center",
        });
        canvas.add(text);
    };
    const addBlurRegion = async () => {
        const fabricModule = await import("fabric");
        const fabric = fabricModule.fabric ?? fabricModule;
        const canvas = fabricRef.current;
        if (!canvas || !canvas.backgroundImage) return;


        const rect = new fabric.Rect({
            left: canvas.width / 2 - 50,
            top: canvas.height / 2 - 30,
            width: 100,
            height: 60,
            selectable: true,
            hasBorders: true,
            hasControls: true,
            strokeWidth: 1,
            fill: new fabric.Pattern({
                source: (() => {
                    const patternCanvas = document.createElement("canvas");
                    const size = 10; // üëà ‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å = ‡∏¢‡∏¥‡πà‡∏á‡∏ñ‡∏µ‡πà
                    patternCanvas.width = size * 2;
                    patternCanvas.height = size * 2;

                    const ctx = patternCanvas.getContext("2d");

                    ctx.fillStyle = "rgba(200, 200, 200, 0.9)";
                    ctx.fillRect(0, 0, size, size);

                    ctx.fillStyle = "rgba(100, 100, 100, 0.9)";
                    ctx.fillRect(size, 0, size, size);

                    ctx.fillStyle = "rgba(100, 100, 100, 0.9)";
                    ctx.fillRect(0, size, size, size);

                    ctx.fillStyle = "rgba(200, 200, 200, 0.9)";
                    ctx.fillRect(size, size, size, size);

                    return patternCanvas;
                })(),
                repeat: "repeat",
            }),
        });


        canvas.add(rect);
        canvas.setActiveObject(rect);

        // üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏° listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö double click ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ö‡∏•‡∏≠
        rect.on("mousedblclick", async () => {
            const left = rect.left ?? 0;
            const top = rect.top ?? 0;
            const width = rect.width ?? 100;
            const height = rect.height ?? 60;

            // ‡∏ó‡∏≥‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            const imageEl = new Image();
            imageEl.crossOrigin = "anonymous";
            imageEl.src = canvasUrl;

            imageEl.onload = () => {
                const tempCanvas = document.createElement("canvas");
                tempCanvas.width = width;
                tempCanvas.height = height;
                const ctx = tempCanvas.getContext("2d");
                if (!ctx) return;

                ctx.drawImage(
                    imageEl,
                    left / canvas.getZoom(),
                    top / canvas.getZoom(),
                    width / canvas.getZoom(),
                    height / canvas.getZoom(),
                    0,
                    0,
                    width,
                    height
                );

                const croppedUrl = tempCanvas.toDataURL();

                fabric.Image.fromURL(croppedUrl, (img) => {
                    img.set({
                        left,
                        top,
                        scaleX: 1,
                        scaleY: 1,
                        selectable: true,
                    });

                    // üëâ ‡πÉ‡∏™‡πà filter ‡πÄ‡∏ö‡∏•‡∏≠
                    img.filters = [
                        new fabric.Image.filters.Blur({ blur: 1 }),
                        new fabric.Image.filters.Noise({ noise: 800 }),
                    ];
                    img.applyFilters();

                    canvas.add(img);
                    canvas.remove(rect);
                    canvas.requestRenderAll();
                });
            };
        });
    };

    const addBox = async () => {
        const fabricModule = await import("fabric");
        const fabric = fabricModule.fabric ?? fabricModule;
        const canvas = fabricRef.current;
        if (!canvas) return;
        const rect = new fabric.Rect({
            left: canvas.width / 2,
            top: canvas.height / 2,
            width: 120,
            height: 80,
            stroke: selectedColor,
            strokeWidth: 3,
            fill: "transparent",
            originX: "center",
            originY: "center",
            selectable: true,
        });
        canvas.add(rect);
    };

    const addArrow = async () => {
        const fabricModule = await import("fabric");
        const fabric = fabricModule.fabric ?? fabricModule;
        const canvas = fabricRef.current;
        if (!canvas) return;
        const x1 = canvas.width / 2 - 50;
        const y1 = canvas.height / 2;
        const x2 = canvas.width / 2 + 50;
        const y2 = canvas.height / 2;
        const line = new fabric.Line([x1, y1, x2, y2], {
            stroke: selectedColor,
            strokeWidth: 4,
            selectable: false,
        });
        const angle = Math.atan2(y2 - y1, x2 - x1) * (180 / Math.PI);
        const arrowHead = new fabric.Triangle({
            left: x2,
            top: y2,
            originX: "center",
            originY: "center",
            angle: angle + 90,
            width: 12,
            height: 14,
            fill: selectedColor,
            selectable: false,
        });
        const arrowGroup = new fabric.Group([line, arrowHead], {
            left: canvas.width / 2,
            top: canvas.height / 2,
            originX: "center",
            originY: "center",
            selectable: true,
        });
        canvas.add(arrowGroup);
    };
    // üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏ß‡∏á‡∏Å‡∏•‡∏°
    const addCircle = async () => {
        const fabricModule = await import("fabric");
        const fabric = fabricModule.fabric ?? fabricModule;
        const canvas = fabricRef.current;
        if (!canvas) return;
        const circle = new fabric.Circle({
            left: canvas.width / 2,
            top: canvas.height / 2,
            radius: 50,
            stroke: selectedColor,
            strokeWidth: 3,
            fill: "transparent",
            originX: "center",
            originY: "center",
            selectable: true,
        });
        circle.setControlsVisibility({
            mtr: false // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏°‡∏∏‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        });
        circle.on("selected", () => {
            setSelectedColor(circle.stroke || "#000000");
        });
        canvas.add(circle);
        canvas.setActiveObject(circle);
    };

    // üëâ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏î‡∏¥‡∏ô‡∏™‡∏≠‡∏ß‡∏≤‡∏î
    const enableFreeDrawing = async () => {
        const fabricModule = await import("fabric");
        const fabric = fabricModule.fabric ?? fabricModule;
        const canvas = fabricRef.current;
        if (!canvas) return;
        canvas.isDrawingMode = !canvas.isDrawingMode;

        if (canvas.isDrawingMode) {
            if (!canvas.freeDrawingBrush) {
                canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
            }
            canvas.freeDrawingBrush.color = selectedColor;
            canvas.freeDrawingBrush.width = 2;
        }

        canvas.requestRenderAll();
    };

    const handleContinue = () => {
        const canvas = fabricRef.current;
        if (!canvas) return;
        const updatedDataUrl = canvas.toDataURL({ format: "png", multiplier: 2 });
        setCanvasUrl(updatedDataUrl);
        setSidePanelOpen(true);
        setIsEditing(false);
    };

    const handleSave = () => {
        const canvas = fabricRef.current;
        if (!canvas) return;

        const dataUrl = canvas.toDataURL({ format: "png", multiplier: 2 });

        const link = document.createElement("a");
        link.href = dataUrl;
        link.download = `screenshot-${Date.now()}.png`;
        link.click();
    };

    const handleCopy = () => {
        const fabricCanvas = fabricRef.current;
        if (!fabricCanvas) return;

        // üîÅ ‡∏î‡∏∂‡∏á‡πÄ‡∏õ‡πá‡∏ô <canvas> element ‡∏õ‡∏Å‡∏ï‡∏¥
        const actualCanvas = fabricCanvas.getElement(); // ‡πÉ‡∏ä‡πâ getElement() ‡πÅ‡∏ó‡∏ô

        console.log("üì∏ ‡πÅ‡∏õ‡∏•‡∏á canvas ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô blob...");
        actualCanvas.toBlob((blob) => {
            if (!blob) {
                console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á blob ‡∏à‡∏≤‡∏Å canvas");
                return;
            }

            console.log("‚úÖ ‡πÑ‡∏î‡πâ blob ‡πÅ‡∏•‡πâ‡∏ß", blob);
            const item = new ClipboardItem({ "image/png": blob });

            navigator.clipboard.write([item])
                .then(() => {
                    alert("‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!");
                })
                .catch((err) => {
                    console.error("‚ùå Clipboard Error:", err);
                    alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: " + err.message);
                });
        }, "image/png");
    };



    // google drive sheet
    // const handleSendData = async (payload) => {
    //     try {
    //         setIsLoading(true); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î

    //         const res = await fetch('/api/send-report', {
    //             method: 'POST',
    //             body: JSON.stringify(payload),
    //             headers: { 'Content-Type': 'application/json' },
    //         });

    //         const result = await res.json();
    //         if (!res.ok) throw new Error(result.error);

    //         Swal.fire({
    //             icon: 'success',
    //             title: '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    //             text: '‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
    //             timer: 2000,
    //             showConfirmButton: false,
    //         });

    //         setSidePanelOpen(false);
    //         resetScreenshotValue();
    //     } catch (err) {
    //         Swal.fire({
    //             icon: 'error',
    //             title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
    //             text: err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
    //         });
    //     } finally {
    //         setIsLoading(false); // ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏´‡∏•‡∏î
    //     }
    // };

    const handleSendData = async (payload) => {
        try {
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î
            setIsLoading(true);

            const response = await fetch("https://api-h-series.telecorp.co.th/api/bugreport", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(payload), // ‡∏™‡πà‡∏á payload ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
            });

            const result = await response.json();

            if (!result.error) {
                console.log("‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", result);

                Swal.fire({
                    icon: "success",
                    title: "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    text: "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                    confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
                    showConfirmButton: false,
                    timer: 2000,
                });

                setSidePanelOpen(false);
                resetScreenshotValue();
            } else {
                console.error("‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result.error);
                Swal.fire({
                    icon: "error",
                    title: "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
                    confirmButtonText: "‡∏õ‡∏¥‡∏î",
                });
            }
        } catch (err) {
            Swal.fire({
                icon: "error",
                title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                text: err.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
            });
        } finally {
            // ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏´‡∏•‡∏î
            setIsLoading(false);
        }
    };
    const resetScreenshotValue = () => {
        setscreenshotValue({
            title: "",
            description: "",
            module: "",
            url: "",
            reporter: "",
            screenshotpath: "",
            severity: "‡∏ï‡πà‡∏≥",
            assignees: [], // ‚úÖ ‡πÉ‡∏™‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
        });
    };



    return (
        <>
            {showInstruction && (
                <div className="fixed inset-0 z-[9998] flex items-center justify-center bg-black/50 pointer-events-none text-black">
                    <div className="bg-white px-6 py-3 rounded-lg shadow-md text-center text-gray-800 text-lg font-medium animate-pulse">
                        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
                    </div>
                </div>
            )}
            {isLoading && (
                <div className="fixed inset-0 bg-white/20 backdrop-blur-md z-[9999] flex flex-col items-center justify-center">
                    <div className="w-16 h-16 border-4 border-blue-500 border-dashed rounded-full animate-spin"></div>
                    <p className="mt-4 text-blue-600 text-lg font-semibold animate-pulse">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
                </div>
            )}

            <button
                onClick={startCapture}
                className="fixed bottom-2 left-2 z-[9999] w-10 h-10 flex items-center justify-center bg-blue-600 text-white rounded-full shadow-md hover:bg-blue-700 transition-all duration-300"
                title="‡πÅ‡∏Ñ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"
            >
                üì∑
            </button>


            {isEditing && (
                <div className="fixed inset-0 bg-black bg-opacity-60 z-[9998] flex flex-col items-center overflow-auto p-4 text-black">
                    <div className="flex flex-col sm:flex-row justify-between items-center gap-2 mb-2 w-full bg-white/90 backdrop-blur p-2 rounded shadow border max-w-5xl">
                        <div className="flex items-center gap-2 flex-wrap justify-center">
                            {/* ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ */}
                            <input
                                type="color"
                                value={selectedColor}
                                onChange={(e) => {
                                    const newColor = e.target.value;
                                    setSelectedColor(newColor);
                                    const canvas = fabricRef.current;
                                    const obj = canvas?.getActiveObject();
                                    if (!obj) return;

                                    if (obj.type === "i-text") {
                                        obj.set("fill", newColor);
                                    } else if (obj.type === "rect") {
                                        obj.set("stroke", newColor);
                                    } else if (obj.type === "group") {
                                        const line = obj.item(0);
                                        const arrow = obj.item(1);
                                        line.set("stroke", newColor);
                                        arrow.set("fill", newColor);
                                    }
                                    else if (obj.type === "circle") {
                                        obj.set("stroke", newColor); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                                    }
                                    else if (obj.path && obj.path.length > 0) {
                                        obj.set("stroke", newColor);
                                    }
                                    canvas.requestRenderAll();
                                }}
                                className="w-10 h-10 border rounded"
                            />

                            {/* ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå */}
                            <input
                                type="number"
                                min={8}
                                max={100}
                                value={fontSize}
                                onChange={(e) => {
                                    const newSize = parseInt(e.target.value);
                                    setFontSize(newSize);
                                    const canvas = fabricRef.current;
                                    const obj = canvas?.getActiveObject();
                                    if (obj?.type === "i-text") {
                                        obj.set("fontSize", newSize);
                                        canvas.requestRenderAll();
                                    }
                                }}
                                className="w-16 min-w-[40px] text-sm border rounded px-2 py-1"
                            />
                            <select
                                value={Math.round(zoomLevel * 100)}
                                onChange={(e) => {
                                    const newZoom = parseInt(e.target.value) / 100;
                                    setZoomLevel(newZoom);
                                }}
                                className="px-2 py-1 border rounded text-sm"
                            >
                                {[25, 50, 75, 100, 125, 150, 200].map((percent) => (
                                    <option key={percent} value={percent}>
                                        {percent}%
                                    </option>
                                ))}
                            </select>
                            {/* ‡∏õ‡∏∏‡πà‡∏°: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏á‡∏Å‡∏•‡∏° */}
                            <button
                                onClick={addCircle}
                                className="p-2 rounded bg-blue-500 text-white hover:bg-blue-600"
                                title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏á‡∏Å‡∏•‡∏°"
                            >
                                ‚≠ï
                            </button>

                            {/* ‡∏õ‡∏∏‡πà‡∏°: ‡∏ß‡∏≤‡∏î‡∏≠‡∏¥‡∏™‡∏£‡∏∞ */}
                            <button
                                onClick={enableFreeDrawing}
                                className="p-2 rounded bg-indigo-500 text-white hover:bg-indigo-600"
                                title="‡∏ß‡∏≤‡∏î‡∏≠‡∏¥‡∏™‡∏£‡∏∞"
                            >
                                ‚úèÔ∏è
                            </button>
                            {/* ‡∏õ‡∏∏‡πà‡∏°: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
                            <button
                                onClick={addText}
                                className="p-2 rounded bg-blue-500 text-white hover:bg-blue-600"
                                title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
                            >
                                üí¨
                            </button>

                            {/* ‡∏õ‡∏∏‡πà‡∏°: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏á */}
                            <button
                                onClick={addBox}
                                className="p-2 rounded bg-yellow-500 text-white hover:bg-yellow-600"
                                title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏ö"
                            >
                                ‚èπÔ∏è
                            </button>

                            {/* ‡∏õ‡∏∏‡πà‡∏°: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£ */}
                            <button
                                onClick={addArrow}
                                className="p-2 rounded bg-green-500 text-white hover:bg-green-600"
                                title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£"
                            >
                                ‚û°Ô∏è
                            </button>
                            <button
                                onClick={addBlurRegion}
                                className="p-2 rounded bg-pink-500 text-white hover:bg-pink-600"
                                title="‡πÄ‡∏ö‡∏•‡∏≠"
                            >
                                üå´Ô∏è
                            </button>

                            {/* ‡∏õ‡∏∏‡πà‡∏°: ‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
                            <button
                                onClick={() => {
                                    const canvas = fabricRef.current;
                                    if (canvas && canvas.getActiveObject()) {
                                        canvas.remove(canvas.getActiveObject());
                                        canvas.discardActiveObject();
                                        canvas.requestRenderAll();
                                    }
                                }}
                                className="p-2 rounded bg-gray-600 text-white hover:bg-gray-700"
                                title="‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏"
                            >
                                üóëÔ∏è
                            </button>

                            {/* ‡∏õ‡∏∏‡πà‡∏°: ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
                            <button
                                onClick={() => {
                                    const canvas = fabricRef.current;
                                    if (!canvas) return;

                                    // ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å object ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô backgroundImage
                                    canvas.getObjects().forEach((obj) => {
                                        canvas.remove(obj);
                                    });

                                    canvas.requestRenderAll();
                                }}
                                className="p-2 rounded bg-gray-400 text-white hover:bg-gray-500"
                                title="‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
                            >
                                üßπ
                            </button>
                        </div>

                        <div className="flex gap-2 mt-2 md:mt-0">
                            <button
                                onClick={handleCopy}
                                className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700 flex items-center gap-1"
                            >
                                üì•
                                copy
                            </button>

                            <button
                                onClick={handleSave}
                                className="px-4 py-2 rounded bg-green-600 text-white hover:bg-green-700 flex items-center gap-1"
                            >
                                üíæ
                                ‡πÇ‡∏´‡∏•‡∏î
                            </button>

                            <button
                                onClick={handleContinue}
                                className="px-4 py-2 rounded bg-purple-500 text-white hover:bg-purple-600 flex items-center gap-1"
                            >
                                üì©
                                ‡∏™‡πà‡∏á
                            </button>

                            <button
                                onClick={() => {
                                    resetScreenshotValue()
                                    setIsEditing(false)
                                }}
                                className="px-4 py-2 rounded bg-red-500 text-white hover:bg-red-600 flex items-center gap-1"
                            >
                                ‚ùå
                                ‡∏õ‡∏¥‡∏î
                            </button>
                        </div>

                    </div>

                    <div className="flex justify-center items-center w-full">
                        <canvas
                            id="screenshot-canvas"
                            className="border rounded shadow mx-auto max-w-full h-auto max-h-[80vh]"
                            width={canvasSize.width}
                            height={canvasSize.height}
                        />
                    </div>

                </div>
            )}

            {sidePanelOpen && (
                <div className="fixed right-0 top-0 w-96 h-full bg-white p-4 shadow-lg z-[9999] overflow-y-auto text-black">
                    <h2 className="font-bold mb-2">üì§ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>

                    {canvasUrl && (
                        <img
                            src={canvasUrl}
                            className="w-full mb-2 border rounded"
                            alt="screenshot preview"
                        />
                    )}

                    {/* üìù title */}
                    <div className="mb-2">
                        <select
                            className="w-full border rounded p-2 mt-1"
                            value={screenshotValue.title}
                            onChange={(e) =>
                                setscreenshotValue((prev) => ({ ...prev, title: e.target.value }))
                            }
                        >
                            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤ --</option>
                            <option value="‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô">üåê ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô</option>
                            <option value="‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á">üåÄ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏Ñ‡πâ‡∏≤‡∏á / ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á</option>
                            <option value="‡πÄ‡∏Å‡∏¥‡∏î Error ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥">üö® Error / ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥</option>
                            <option value="‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ">üîò ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ</option>
                            <option value="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å">üì• ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</option>
                            <option value="‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á">üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ú‡∏¥‡∏î</option>
                            <option value="‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö">üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ</option>
                            <option value="‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πâ‡∏≤ / Time out">üê¢ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πâ‡∏≤ / Time out</option>
                            <option value="‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î">üí• ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏°</option>
                            <option value="‡∏≠‡∏∑‡πà‡∏ô ‡πÜ">‚úèÔ∏è ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)</option>
                        </select>
                    </div>


                    {/* üìù description */}
                    <textarea
                        placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (Description)"
                        className="w-full border rounded p-2 h-20 mb-2"
                        value={screenshotValue.description}
                        onChange={(e) =>
                            setscreenshotValue((prev) => ({ ...prev, description: e.target.value }))
                        }
                    />


                    {/* üö® ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á */}
                    <div className="mb-2">
                        <label className="block mb-1 font-medium">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤</label>
                        <select
                            className="w-full border rounded p-2"
                            value={screenshotValue.severity}
                            onChange={(e) =>
                                setscreenshotValue((prev) => ({ ...prev, severity: e.target.value }))
                            }
                        >
                            <option value="‡∏ï‡πà‡∏≥">üü¢ ‡∏ï‡πà‡∏≥ (Minor)</option>
                            <option value="‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á">üü† ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Moderate)</option>
                            <option value="‡∏™‡∏π‡∏á">üî¥ ‡∏™‡∏π‡∏á (Severe)</option>
                            <option value="‡∏ß‡∏¥‡∏Å‡∏§‡∏ï">üö® ‡∏ß‡∏¥‡∏Å‡∏§‡∏ï (Critical)</option>
                        </select>
                    </div>

                    {/* üåê URL */}
                    <input
                        type="text"
                        placeholder="URL ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"
                        className="w-full border rounded p-2 mb-2"
                        value={screenshotValue.url}
                        onChange={(e) =>
                            setscreenshotValue((prev) => ({ ...prev, url: e.target.value }))
                        }
                    />

                    {/* üë§ ‡∏ú‡∏π‡πâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô */}
                    <input
                        type="text"
                        placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (Reporter)"
                        className="w-full border rounded p-2 mb-2"
                        value={screenshotValue.reporter}
                        onChange={(e) =>
                            setscreenshotValue((prev) => ({ ...prev, reporter: e.target.value }))
                        }
                    />

                    {/* ‚úèÔ∏è ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
                    <textarea
                        placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
                        className="w-full border rounded p-2 h-20 mb-2"
                        value={screenshotValue.comment}
                        onChange={(e) =>
                            setscreenshotValue((prev) => ({ ...prev, comment: e.target.value }))
                        }
                    />
                    {/* google drive sheet */}
                    {/* <button
                        disabled={isLoading}
                        className={`mt-2 px-4 py-2 rounded w-full text-white ${isLoading ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'}`}
                        onClick={() => {
                            const payload = {
                                projectname: process.env.NEXT_PUBLIC_PROJECT_NAME,
                                title: screenshotValue.title,
                                description: screenshotValue.description,
                                module: window.location.href,
                                url: screenshotValue.url,
                                reporter: screenshotValue.reporter,
                                status: '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                                createdat: new Date().toLocaleString(),
                                screenshotpath: canvasUrl,
                            };
                            handleSendData(payload);
                        }}
                    >
                        {isLoading ? '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : 'üì© ‡∏™‡πà‡∏á'}
                    </button> */}

                    <button
                        disabled={isLoading}
                        className={`mt-2 px-4 py-2 rounded w-full text-white ${isLoading ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'}`}
                        onClick={() => {
                            const payload = {
                                ...screenshotValue,
                                module: window.location.href,
                                screenshotpath: canvasUrl,
                                bucode: "devtest"
                            };
                            console.log("üì© ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", payload);
                            handleSendData(payload)
                            // setSidePanelOpen(false);
                        }}
                    >
                        {isLoading ? '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : 'üì© ‡∏™‡πà‡∏á'}
                    </button>

                    <button
                        className="mt-2 bg-red-600 text-white px-4 py-2 rounded w-full hover:bg-red-700"
                        onClick={() => {
                            resetScreenshotValue()
                            setSidePanelOpen(false);
                        }}
                    >
                        ‚ùå ‡∏õ‡∏¥‡∏î
                    </button>
                </div>
            )}

        </>
    );
}